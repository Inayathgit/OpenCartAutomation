package testCases;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Properties;
import java.util.concurrent.TimeUnit;


import org.apache.commons.lang3.RandomStringUtils;
import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.apache.logging.log4j.core.util.FileUtils;
import org.apache.commons.*;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.testng.annotations.AfterClass;
import org.testng.annotations.BeforeClass;
import org.testng.annotations.Parameters;

public class BaseClass {
	 
	public WebDriver driver;
	public Logger logger;
	Properties prop;
	@BeforeClass(groups = {"Sanity","Regression"})
	@Parameters({"os","browser"})
	public void setup(String os, String browser) throws IOException  {
		
		FileReader file = new FileReader(".//src//test/resources//Config.properties");
		prop = new Properties();
		prop.load(file);
		logger = LogManager.getLogger(this.getClass());
		switch(browser.toLowerCase()) {
		case "chrome": driver= new ChromeDriver();break;
		case "edge": driver = new EdgeDriver();break;
		case "firefox": driver =  new FirefoxDriver();break;
		default: System.out.println("Invalid Driver");return;
		}
		
		driver.get(prop.getProperty("url"));
		driver.manage().deleteAllCookies();
		driver.manage().timeouts().implicitlyWait(10,TimeUnit.SECONDS);
		driver.manage().window().maximize();
		
			
	}
	
	@AfterClass(groups = {"Sanity","Regression"})
	public void tearDown() {
		driver.quit();
	}
	
	
	public String generateRandomString(int length) {
		
		String str = RandomStringUtils.randomAlphabetic(length);
		return str;
	}
	
	public String generateRandomAlphanumeric(int length) {
		String str = RandomStringUtils.randomAlphanumeric(length);
		return str;
	}
	public String generateRandomNumeric(int length) {
		String str = RandomStringUtils.randomNumeric(length);
		return str;
	}
	
	
	public String captureScreen(String name)throws IOException {
		
		if (driver == null) {
			System.out.println("WebDriver not inititalized");
	        throw new IllegalStateException("WebDriver is not initialized.");
		}
		 // Capture screenshot as a file
	    TakesScreenshot screenshot = (TakesScreenshot) driver;
	    File sourceFile = screenshot.getScreenshotAs(OutputType.FILE);
		
		 // Get current date and format it
	    Date currentDate = new Date();
	    SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-YYYY"); // Correct date format
	    String date = sdf.format(currentDate);

	    // Define the destination file path with a name and date
	    File destinationFile = new File(System.getProperty("user.home"), "screenshots/" + "_" + date + ".png"); // Adding .png extension

	    // Copy the screenshot to the destination path
	   destinationFile.renameTo(sourceFile);

	    // Get the absolute path of the saved screenshot
	    String path = destinationFile.getAbsolutePath();

	    return path;
		
		
	}
}
